name: Build and Release

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux
            triplet: x64-linux
            artifact_name: popplershot-linux
            executable_extension: ""

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0  # Fetch all history for proper versioning

    - name: Get version
      id: version
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # Tagged release - use tag as version
          VERSION=${GITHUB_REF#refs/tags/}
        else
          # Development build - use commit hash and date
          VERSION=$(git describe --always --dirty --abbrev=8)
          VERSION="dev-${VERSION}-$(date +'%Y%m%d')"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          libpoppler-cpp-dev \
          mingw-w64 \
          mingw-w64-tools \
          curl \
          zip \
          unzip \
          tar



    - name: Cache vcpkg packages
      uses: actions/cache@v4
      with:
        path: |
          vcpkg/installed
          vcpkg/buildtrees
        key: ${{ runner.os }}-${{ matrix.triplet }}-vcpkg-${{ hashFiles('vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.triplet }}-vcpkg-

    - name: Update version in CMakeLists.txt
      shell: bash
      run: |
        # Strip 'v' prefix from version if present (CMake expects semantic version without 'v')
        CMAKE_VERSION="${{ steps.version.outputs.VERSION }}"
        CMAKE_VERSION="${CMAKE_VERSION#v}"  # Remove 'v' prefix if present
        
        # Only update if it's a proper semantic version (x.y.z format)
        if [[ $CMAKE_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          sed -i "s/VERSION [0-9]\+\.[0-9]\+\.[0-9]\+/VERSION $CMAKE_VERSION/g" CMakeLists.txt
          echo "Updated CMakeLists.txt version to $CMAKE_VERSION"
        else
          echo "Version '$CMAKE_VERSION' is not semantic version format, keeping original version in CMakeLists.txt"
        fi

    - name: Build using build.sh (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        chmod +x build.sh
        if [ "${{ matrix.triplet }}" = "x64-linux" ]; then
          ./build.sh --release --arch x64 --target linux
        else
          ./build.sh --release --arch x86 --target linux
        fi



    - name: Create artifact directory
      shell: bash
      run: |
        mkdir -p artifacts
        
        # Find the built executable (Linux build locations)
        if [ -f "out/build/linux-x64/popplershot" ]; then
          cp out/build/linux-x64/popplershot artifacts/
        elif [ -f "out/build/linux-x86/popplershot" ]; then
          cp out/build/linux-x86/popplershot artifacts/
        elif [ -f "build/popplershot" ]; then
          cp build/popplershot artifacts/
        else
          echo "Error: Could not find popplershot executable"
          find . -name "popplershot*" -type f
          exit 1
        fi
        
        # Create version info file
        echo "PopplerShot ${{ steps.version.outputs.VERSION }}" > artifacts/VERSION.txt
        echo "Built on: $(date)" >> artifacts/VERSION.txt
        echo "Platform: ${{ matrix.name }}" >> artifacts/VERSION.txt
        echo "Commit: ${{ github.sha }}" >> artifacts/VERSION.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-${{ steps.version.outputs.VERSION }}
        path: artifacts/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          PRERELEASE=false
        else
          VERSION=$(git describe --always --dirty --abbrev=8)
          VERSION="dev-${VERSION}-$(date +'%Y%m%d')"
          PRERELEASE=true
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "PRERELEASE=$PRERELEASE" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release archives
      run: |
        # Create zip archive for Linux
        cd popplershot-linux-${{ steps.version.outputs.VERSION }}
        zip -r ../popplershot-linux-${{ steps.version.outputs.VERSION }}.zip .
        cd ..

    - name: Generate changelog
      id: changelog
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # For tagged releases, get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" -10)
          fi
        else
          # For dev releases, get last 10 commits
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" -10)
        fi
        
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: PopplerShot ${{ steps.version.outputs.VERSION }}
        body: |
          ## PopplerShot ${{ steps.version.outputs.VERSION }}
          
          ### Changes
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ### Downloads
          - **Linux**: `popplershot-linux-${{ steps.version.outputs.VERSION }}.zip`
          
          ### Installation
          1. Download the appropriate archive for your platform
          2. Extract the archive
          3. Run `popplershot` from the command line
          
          Built from commit: ${{ github.sha }}
        files: |
          popplershot-linux-${{ steps.version.outputs.VERSION }}.zip
        prerelease: ${{ steps.version.outputs.PRERELEASE }}
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
